<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\API\BaseController;
use Illuminate\Http\Request;
use App\Models\LoaibientheModel;
use Illuminate\Http\Response;

class LoaiBienTheAPI extends BaseController
{
    /**
     * üìÑ L·∫•y danh s√°ch lo·∫°i bi·∫øn th·ªÉ (c√≥ ph√¢n trang + t√¨m ki·∫øm)
     */
    public function index(Request $request)
    {
        $perPage     = $request->get('per_page', 10);
        $currentPage = $request->get('page', 1);
        $keyword     = $request->get('q'); // t·ª´ kh√≥a t√¨m ki·∫øm

        $query = LoaibientheModel::withCount('bienthe')
            ->when($keyword, function ($query) use ($keyword) {
                $query->where(function ($sub) use ($keyword) {
                    $sub->where('ten', 'like', "%$keyword%")
                        ->orWhere('trangthai', 'like', "%$keyword%");
                });
            })
            ->latest('updated_at');

        $items = $query->paginate($perPage, ['*'], 'page', $currentPage);

        if ($currentPage > $items->lastPage() && $currentPage > 1) {
            return $this->jsonResponse([
                'status'  => false,
                'message' => 'Trang kh√¥ng t·ªìn t·∫°i. Trang cu·ªëi c√πng l√† ' . $items->lastPage(),
                'meta'    => [
                    'current_page' => $currentPage,
                    'last_page'    => $items->lastPage(),
                    'per_page'     => $perPage,
                    'total'        => $items->total(),
                ]
            ], Response::HTTP_NOT_FOUND);
        }

        return $this->jsonResponse([
            'status'  => true,
            'message' => 'Danh s√°ch lo·∫°i bi·∫øn th·ªÉ',
            'data'    => $items->items(),
            'meta'    => [
                'current_page'  => $items->currentPage(),
                'last_page'     => $items->lastPage(),
                'per_page'      => $items->perPage(),
                'total'         => $items->total(),
                'next_page_url' => $items->nextPageUrl(),
                'prev_page_url' => $items->previousPageUrl(),
            ]
        ], Response::HTTP_OK);
    }

    /**
     * üëÅÔ∏è L·∫•y chi ti·∫øt 1 lo·∫°i bi·∫øn th·ªÉ
     */
    public function show($id)
    {
        $item = LoaibientheModel::with('bienthe')->find($id);

        if (!$item) {
            return $this->jsonResponse([
                'status'  => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y lo·∫°i bi·∫øn th·ªÉ'
            ], Response::HTTP_NOT_FOUND);
        }

        return $this->jsonResponse([
            'status'  => true,
            'message' => 'Chi ti·∫øt lo·∫°i bi·∫øn th·ªÉ',
            'data'    => $item
        ], Response::HTTP_OK);
    }

    /**
     * ‚ûï T·∫°o m·ªõi lo·∫°i bi·∫øn th·ªÉ
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'ten'       => 'required|string|max:255|unique:loaibienthe,ten',
            'trangthai' => 'nullable|in:Hi·ªÉn th·ªã,T·∫°m ·∫©n',
        ]);

        $item = LoaibientheModel::create($validated);

        return $this->jsonResponse([
            'status'  => true,
            'message' => 'T·∫°o lo·∫°i bi·∫øn th·ªÉ th√†nh c√¥ng',
            'data'    => $item
        ], Response::HTTP_CREATED);
    }

    /**
     * ‚úèÔ∏è C·∫≠p nh·∫≠t lo·∫°i bi·∫øn th·ªÉ
     */
    public function update(Request $request, $id)
    {
        $item = LoaibientheModel::find($id);

        if (!$item) {
            return $this->jsonResponse([
                'status'  => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y lo·∫°i bi·∫øn th·ªÉ'
            ], Response::HTTP_NOT_FOUND);
        }

        $validated = $request->validate([
            'ten'       => 'sometimes|required|string|max:255|unique:loaibienthe,ten,' . $id,
            'trangthai' => 'nullable|in:Hi·ªÉn th·ªã,T·∫°m ·∫©n',
        ]);

        $item->update($validated);

        return $this->jsonResponse([
            'status'  => true,
            'message' => 'C·∫≠p nh·∫≠t lo·∫°i bi·∫øn th·ªÉ th√†nh c√¥ng',
            'data'    => $item
        ], Response::HTTP_OK);
    }

    /**
     * ‚ùå X√≥a lo·∫°i bi·∫øn th·ªÉ (n·∫øu ch∆∞a c√≥ bi·∫øn th·ªÉ con)
     */
    public function destroy($id)
    {
        $item = LoaibientheModel::find($id);

        if (!$item) {
            return $this->jsonResponse([
                'status'  => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y lo·∫°i bi·∫øn th·ªÉ'
            ], Response::HTTP_NOT_FOUND);
        }

        // Ki·ªÉm tra c√≥ bi·∫øn th·ªÉ con kh√¥ng
        if ($item->bienthe()->count() > 0) {
            return $this->jsonResponse([
                'status'  => false,
                'message' => 'Kh√¥ng th·ªÉ x√≥a! Lo·∫°i bi·∫øn th·ªÉ n√†y v·∫´n c√≤n bi·∫øn th·ªÉ con.'
            ], Response::HTTP_BAD_REQUEST);
        }

        $item->delete();

        return $this->jsonResponse([
            'status'  => true,
            'message' => 'ƒê√£ x√≥a lo·∫°i bi·∫øn th·ªÉ th√†nh c√¥ng'
        ], Response::HTTP_OK);
    }
    /// thieu x√≥a m·ªÅm r·ªìi
}
